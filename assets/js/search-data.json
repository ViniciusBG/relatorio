{
  
    
        "post0": {
            "title": "Title",
            "content": "Curvas de coronavirus - Compara&#231;&#227;o Brasil e alguns pa&#237;ses do mundo . Link . https://www.ecdc.europa.eu/en/publications-data/download-todays-data-geographic-distribution-covid-19-cases-worldwide?fbclid=IwAR349UqPdhIujQOAwhnj9BrKBHMlhUjS0LRm0mN1nBeZjG-cYH3ROi6ific . #URL = &quot;https://opendata.ecdc.europa.eu/covid19/casedistribution/csv&quot; #requests.get(URL) . !rm dados.csv . !wget https://opendata.ecdc.europa.eu/covid19/casedistribution/csv -O dados.csv . --2020-03-28 21:50:34-- https://opendata.ecdc.europa.eu/covid19/casedistribution/csv Resolving opendata.ecdc.europa.eu (opendata.ecdc.europa.eu)... 212.181.0.63 Connecting to opendata.ecdc.europa.eu (opendata.ecdc.europa.eu)|212.181.0.63|:443... connected. HTTP request sent, awaiting response... 301 Moved Permanently Location: https://opendata.ecdc.europa.eu/covid19/casedistribution/csv/ [following] --2020-03-28 21:50:35-- https://opendata.ecdc.europa.eu/covid19/casedistribution/csv/ Reusing existing connection to opendata.ecdc.europa.eu:443. HTTP request sent, awaiting response... 200 OK Length: 375360 (367K) [application/octet-stream] Saving to: ‘dados.csv’ dados.csv 100%[===================&gt;] 366.56K 451KB/s in 0.8s 2020-03-28 21:50:35 (451 KB/s) - ‘dados.csv’ saved [375360/375360] . Dia . url = &#39;https://opendata.ecdc.europa.eu/covid19/casedistribution/csv&#39; . Dados dos pa&#237;ses individualmente . Tabela final . Adicionando percentual . Gr&#225;ficos de contamina&#231;&#227;o . meio_zoom = final_data[final_data[&#39;Casos acumulados&#39;]&lt;=5000] . plt.figure(figsize=(6.5,8)) sns.lineplot(x=&#39;Dias desde o caso número 50&#39;,y=&#39;Casos acumulados&#39;,data=meio_zoom[meio_zoom[&#39;Países e territórios&#39;]==&#39;Brazil&#39;],color=&#39;black&#39;,linewidth=4,label=&#39;Brasil&#39;) sns.lineplot(x=&#39;Dias desde o caso número 50&#39;,y=&#39;Casos acumulados&#39;,data=meio_zoom[meio_zoom[&#39;Países e territórios&#39;]==&#39;Italy&#39;],label=&#39;Itália&#39;) sns.lineplot(x=&#39;Dias desde o caso número 50&#39;,y=&#39;Casos acumulados&#39;,data=meio_zoom[meio_zoom[&#39;Países e territórios&#39;]==&#39;United_States_of_America&#39;],label=&#39;Estados Unidos&#39;) sns.lineplot(x=&#39;Dias desde o caso número 50&#39;,y=&#39;Casos acumulados&#39;,data=meio_zoom[meio_zoom[&#39;Países e territórios&#39;]==&#39;United_Kingdom&#39;],label=&#39;Reino Unido&#39;) sns.lineplot(x=&#39;Dias desde o caso número 50&#39;,y=&#39;Casos acumulados&#39;,data=meio_zoom[meio_zoom[&#39;Países e territórios&#39;]==&#39;South_Korea&#39;],label= &quot;Coréia do Sul&quot;) sns.lineplot(x=&#39;Dias desde o caso número 50&#39;,y=&#39;Casos acumulados&#39;,data=meio_zoom[meio_zoom[&#39;Países e territórios&#39;]==&#39;France&#39;],label=&#39;França&#39;) sns.lineplot(x=&#39;Dias desde o caso número 50&#39;,y=&#39;Casos acumulados&#39;,data=meio_zoom[meio_zoom[&#39;Países e territórios&#39;]==&#39;Japan&#39;],label=&#39;Japão&#39;) sns.lineplot(x=&#39;Dias desde o caso número 50&#39;,y=&#39;Casos acumulados&#39;,data=meio_zoom[meio_zoom[&#39;Países e territórios&#39;]==&#39;Spain&#39;],label=&#39;Espanha&#39;) sns.lineplot(x=&#39;Dias desde o caso número 50&#39;,y=&#39;Casos acumulados&#39;,data=meio_zoom[meio_zoom[&#39;Países e territórios&#39;]==&#39;Argentina&#39;],label=&#39;Argentina&#39;) sns.lineplot(x=&#39;Dias desde o caso número 50&#39;,y=&#39;Casos acumulados&#39;,data=meio_zoom[meio_zoom[&#39;Países e territórios&#39;]==&#39;India&#39;],label=&#39;Índia&#39;) sns.lineplot(x=&#39;Dias desde o caso número 50&#39;,y=&#39;Casos acumulados&#39;,data=meio_zoom[meio_zoom[&#39;Países e territórios&#39;]==&#39;Germany&#39;],label=&#39;Alemanha&#39;) sns.lineplot(x=&#39;Dias desde o caso número 50&#39;,y=&#39;Casos acumulados&#39;,data=meio_zoom[meio_zoom[&#39;Países e territórios&#39;]==&#39;Czech_Republic&#39;],label=&#39;República Tcheca&#39;) plt.grid(color=&#39;black&#39;, linestyle=&#39;--&#39;, linewidth=0.17) plt.text(11,0,texto,fontsize=12) plt.xticks([ 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28,30,32,34,36]) plt.title(&#39;COVID-19 - Casos confirmados - {} n Zoom até 5000 casos&#39;.format(today)) plt.savefig(&quot;plots/02_corona_meio_zoom&quot;) . plt.figure(figsize=(6.5,8)) sns.lineplot(x=&#39;Dias desde o caso número 50&#39;,y=&#39;Casos acumulados&#39;,data=final_data[final_data[&#39;Países e territórios&#39;]==&#39;Brazil&#39;],color=&#39;black&#39;,linewidth=6,label=&#39;Brasil&#39;) sns.lineplot(x=&#39;Dias desde o caso número 50&#39;,y=&#39;Casos acumulados&#39;,data=final_data[final_data[&#39;Países e territórios&#39;]==&#39;Italy&#39;],label=&#39;Itália&#39;) sns.lineplot(x=&#39;Dias desde o caso número 50&#39;,y=&#39;Casos acumulados&#39;,data=final_data[final_data[&#39;Países e territórios&#39;]==&#39;United_States_of_America&#39;],label=&#39;Estados Unidos&#39;) sns.lineplot(x=&#39;Dias desde o caso número 50&#39;,y=&#39;Casos acumulados&#39;,data=final_data[final_data[&#39;Países e territórios&#39;]==&#39;United_Kingdom&#39;],label=&#39;Reino Unido&#39;) sns.lineplot(x=&#39;Dias desde o caso número 50&#39;,y=&#39;Casos acumulados&#39;,data=final_data[final_data[&#39;Países e territórios&#39;]==&#39;South_Korea&#39;],label= &quot;Coréia do Sul&quot;) sns.lineplot(x=&#39;Dias desde o caso número 50&#39;,y=&#39;Casos acumulados&#39;,data=final_data[final_data[&#39;Países e territórios&#39;]==&#39;France&#39;],label=&#39;França&#39;) sns.lineplot(x=&#39;Dias desde o caso número 50&#39;,y=&#39;Casos acumulados&#39;,data=final_data[final_data[&#39;Países e territórios&#39;]==&#39;Japan&#39;],label=&#39;Japão&#39;) sns.lineplot(x=&#39;Dias desde o caso número 50&#39;,y=&#39;Casos acumulados&#39;,data=final_data[final_data[&#39;Países e territórios&#39;]==&#39;Spain&#39;],label=&#39;Espanha&#39;) sns.lineplot(x=&#39;Dias desde o caso número 50&#39;,y=&#39;Casos acumulados&#39;,data=final_data[final_data[&#39;Países e territórios&#39;]==&#39;Argentina&#39;],label=&#39;Argentina&#39;) sns.lineplot(x=&#39;Dias desde o caso número 50&#39;,y=&#39;Casos acumulados&#39;,data=final_data[final_data[&#39;Países e territórios&#39;]==&#39;India&#39;],label=&#39;Índia&#39;) sns.lineplot(x=&#39;Dias desde o caso número 50&#39;,y=&#39;Casos acumulados&#39;,data=final_data[final_data[&#39;Países e territórios&#39;]==&#39;Germany&#39;],label=&#39;Alemanha&#39;) sns.lineplot(x=&#39;Dias desde o caso número 50&#39;,y=&#39;Casos acumulados&#39;,data=final_data[final_data[&#39;Países e territórios&#39;]==&#39;Czech_Republic&#39;],label=&#39;República Tcheca&#39;) plt.grid(color=&#39;black&#39;, linestyle=&#39;--&#39;, linewidth=0.17) plt.yscale(&#39;log&#39;) plt.yticks([100,300,500,1000,5000,10000,20000,30000,40000] ) plt.xticks([ 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28,30,32,34,36]) plt.title(&#39;COVID-19 - Casos totais confirmados - {} n Escala Logarítmica&#39;.format(today)) plt.text(0,60000,texto,fontsize=12) plt.savefig(&quot;plots/03_corona_grafico.png&quot;) . plt.figure(figsize=(6.5,8)) sns.lineplot(x=&#39;Dias desde o caso número 50&#39;,y=&#39;Casos acumulados&#39;,data=final_data[final_data[&#39;Países e territórios&#39;]==&#39;Brazil&#39;],color=&#39;black&#39;,linewidth=7,label=&#39;Brasil&#39;) sns.lineplot(x=&#39;Dias desde o caso número 50&#39;,y=&#39;Casos acumulados&#39;,data=final_data[final_data[&#39;Países e territórios&#39;]==&#39;Italy&#39;],label=&#39;Itália&#39;) sns.lineplot(x=&#39;Dias desde o caso número 50&#39;,y=&#39;Casos acumulados&#39;,data=final_data[final_data[&#39;Países e territórios&#39;]==&#39;United_States_of_America&#39;],label=&#39;Estados Unidos&#39;) sns.lineplot(x=&#39;Dias desde o caso número 50&#39;,y=&#39;Casos acumulados&#39;,data=final_data[final_data[&#39;Países e territórios&#39;]==&#39;United_Kingdom&#39;],label=&#39;Reino Unido&#39;) sns.lineplot(x=&#39;Dias desde o caso número 50&#39;,y=&#39;Casos acumulados&#39;,data=final_data[final_data[&#39;Países e territórios&#39;]==&#39;South_Korea&#39;],label= &quot;Coréia do Sul&quot;) sns.lineplot(x=&#39;Dias desde o caso número 50&#39;,y=&#39;Casos acumulados&#39;,data=final_data[final_data[&#39;Países e territórios&#39;]==&#39;France&#39;],label=&#39;França&#39;) sns.lineplot(x=&#39;Dias desde o caso número 50&#39;,y=&#39;Casos acumulados&#39;,data=final_data[final_data[&#39;Países e territórios&#39;]==&#39;Japan&#39;],label=&#39;Japão&#39;) sns.lineplot(x=&#39;Dias desde o caso número 50&#39;,y=&#39;Casos acumulados&#39;,data=final_data[final_data[&#39;Países e territórios&#39;]==&#39;Spain&#39;],label=&#39;Espanha&#39;) sns.lineplot(x=&#39;Dias desde o caso número 50&#39;,y=&#39;Casos acumulados&#39;,data=final_data[final_data[&#39;Países e territórios&#39;]==&#39;Argentina&#39;],label=&#39;Argentina&#39;) sns.lineplot(x=&#39;Dias desde o caso número 50&#39;,y=&#39;Casos acumulados&#39;,data=final_data[final_data[&#39;Países e territórios&#39;]==&#39;India&#39;],label=&#39;Índia&#39;) sns.lineplot(x=&#39;Dias desde o caso número 50&#39;,y=&#39;Casos acumulados&#39;,data=final_data[final_data[&#39;Países e territórios&#39;]==&#39;Germany&#39;],label=&#39;Alemanha&#39;) sns.lineplot(x=&#39;Dias desde o caso número 50&#39;,y=&#39;Casos acumulados&#39;,data=final_data[final_data[&#39;Países e territórios&#39;]==&#39;Czech_Republic&#39;],label=&#39;República Tcheca&#39;) plt.grid(color=&#39;black&#39;, linestyle=&#39;--&#39;, linewidth=0.17) plt.text(0,35000,texto,fontsize=12) plt.yticks([1000,1000,5000,10000,20000,30000,40000] ) plt.xticks([ 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28,30,32,34,36]) plt.title(&#39;COVID-19 - Casos confirmados - {} n Escala aritmética&#39;.format(today)) plt.savefig(&quot;plots/04_corona_grafico_art.png&quot;) . MORTES . Criando tabelas . mortos = data2[[&#39;dateRep&#39;,&#39;deaths&#39;,&#39;countriesAndTerritories&#39;]] . mgermany = mortos[mortos[&#39;countriesAndTerritories&#39;]==&#39;Germany&#39;] mgermany.sort_index(ascending=False,inplace=True) mgermany[&#39;Cumulativo&#39;] = mgermany[&#39;deaths&#39;].cumsum() mgermany = mgermany[mgermany[&#39;Cumulativo&#39;]&gt;=1] mgermany.reset_index(drop=True, inplace=True) mgermany.drop([&#39;deaths&#39;,&#39;dateRep&#39;],axis=1,inplace=True) mgermany.tail(5) . countriesAndTerritories Cumulativo . 14 Germany | 126 | . 15 Germany | 149 | . 16 Germany | 198 | . 17 Germany | 253 | . 18 Germany | 325 | . mitaly = mortos[mortos[&#39;countriesAndTerritories&#39;]==&#39;Italy&#39;] mitaly.sort_index(ascending=False,inplace=True) mitaly[&#39;Cumulativo&#39;] = mitaly[&#39;deaths&#39;].cumsum() mitaly = mitaly[mitaly[&#39;Cumulativo&#39;]&gt;=1] mitaly.reset_index(drop=True, inplace=True) mitaly.drop([&#39;deaths&#39;,&#39;dateRep&#39;],axis=1,inplace=True) mitaly.tail(5) . countriesAndTerritories Cumulativo . 30 Italy | 6077 | . 31 Italy | 6820 | . 32 Italy | 7505 | . 33 Italy | 8165 | . 34 Italy | 9136 | . margentina = mortos[mortos[&#39;countriesAndTerritories&#39;]==&#39;Argentina&#39;] margentina.sort_index(ascending=False,inplace=True) margentina[&#39;Cumulativo&#39;] = margentina[&#39;deaths&#39;].cumsum() margentina = margentina[margentina[&#39;Cumulativo&#39;]&gt;=1] margentina.reset_index(drop=True, inplace=True) margentina.drop([&#39;deaths&#39;,&#39;dateRep&#39;],axis=1,inplace=True) margentina.tail(5) . countriesAndTerritories Cumulativo . 14 Argentina | 4 | . 15 Argentina | 6 | . 16 Argentina | 8 | . 17 Argentina | 12 | . 18 Argentina | 17 | . mbrazil = mortos[mortos[&#39;countriesAndTerritories&#39;]==&#39;Brazil&#39;] mbrazil.sort_index(ascending=False,inplace=True) mbrazil[&#39;Cumulativo&#39;] = mbrazil[&#39;deaths&#39;].cumsum() mbrazil = mbrazil[mbrazil[&#39;Cumulativo&#39;]&gt;=1] mbrazil.reset_index(drop=True, inplace=True) mbrazil.drop([&#39;deaths&#39;,&#39;dateRep&#39;],axis=1,inplace=True) mbrazil.tail(5) . countriesAndTerritories Cumulativo . 6 Brazil | 34 | . 7 Brazil | 46 | . 8 Brazil | 57 | . 9 Brazil | 77 | . 10 Brazil | 92 | . mjapan = mortos[mortos[&#39;countriesAndTerritories&#39;]==&#39;Japan&#39;] mjapan.sort_index(ascending=False,inplace=True) mjapan[&#39;Cumulativo&#39;] = mjapan[&#39;deaths&#39;].cumsum() mjapan = mjapan[mjapan[&#39;Cumulativo&#39;]&gt;=1] mjapan.reset_index(drop=True, inplace=True) mjapan.drop([&#39;deaths&#39;,&#39;dateRep&#39;],axis=1,inplace=True) mjapan.tail(5) . countriesAndTerritories Cumulativo . 40 Japan | 42 | . 41 Japan | 43 | . 42 Japan | 45 | . 43 Japan | 46 | . 44 Japan | 49 | . msouth_korea = mortos[mortos[&#39;countriesAndTerritories&#39;]==&#39;South_Korea&#39;] msouth_korea.sort_index(ascending=False,inplace=True) msouth_korea[&#39;Cumulativo&#39;] = msouth_korea[&#39;deaths&#39;].cumsum() msouth_korea = msouth_korea[msouth_korea[&#39;Cumulativo&#39;]&gt;=1] msouth_korea.reset_index(drop=True, inplace=True) msouth_korea.drop([&#39;deaths&#39;,&#39;dateRep&#39;],axis=1,inplace=True) msouth_korea.tail(5) . countriesAndTerritories Cumulativo . 32 South_Korea | 120 | . 33 South_Korea | 126 | . 34 South_Korea | 131 | . 35 South_Korea | 139 | . 36 South_Korea | 144 | . mus = mortos[mortos[&#39;countriesAndTerritories&#39;]==&#39;United_States_of_America&#39;] mus.sort_index(ascending=False,inplace=True) mus[&#39;Cumulativo&#39;] = mus[&#39;deaths&#39;].cumsum() mus = mus[mus[&#39;Cumulativo&#39;]&gt;=1] mus.reset_index(drop=True, inplace=True) mus.drop([&#39;deaths&#39;,&#39;dateRep&#39;],axis=1,inplace=True) mus.tail(5) . countriesAndTerritories Cumulativo . 23 United_States_of_America | 590 | . 24 United_States_of_America | 801 | . 25 United_States_of_America | 1050 | . 26 United_States_of_America | 1296 | . 27 United_States_of_America | 1707 | . mfrance = mortos[mortos[&#39;countriesAndTerritories&#39;]==&#39;France&#39;] mfrance.sort_index(ascending=False,inplace=True) mfrance[&#39;Cumulativo&#39;] = mfrance[&#39;deaths&#39;].cumsum() mfrance = mfrance[mfrance[&#39;Cumulativo&#39;]&gt;=1] mfrance.reset_index(drop=True, inplace=True) mfrance.drop([&#39;deaths&#39;,&#39;dateRep&#39;],axis=1,inplace=True) mfrance.tail(5) . countriesAndTerritories Cumulativo . 38 France | 860 | . 39 France | 1100 | . 40 France | 1331 | . 41 France | 1696 | . 42 France | 1995 | . muk = mortos[mortos[&#39;countriesAndTerritories&#39;]==&#39;United_Kingdom&#39;] muk.sort_index(ascending=False,inplace=True) muk[&#39;Cumulativo&#39;] = muk[&#39;deaths&#39;].cumsum() muk = muk[muk[&#39;Cumulativo&#39;]&gt;=1] muk.reset_index(drop=True, inplace=True) muk.drop([&#39;deaths&#39;,&#39;dateRep&#39;],axis=1,inplace=True) muk.tail(5) . countriesAndTerritories Cumulativo . 18 United_Kingdom | 335 | . 19 United_Kingdom | 422 | . 20 United_Kingdom | 463 | . 21 United_Kingdom | 578 | . 22 United_Kingdom | 759 | . mchina = mortos[mortos[&#39;countriesAndTerritories&#39;]==&#39;China&#39;] mchina.sort_index(ascending=False,inplace=True) mchina[&#39;Cumulativo&#39;] = mchina[&#39;deaths&#39;].cumsum() mchina = mchina[mchina[&#39;Cumulativo&#39;]&gt;=1] mchina.reset_index(drop=True, inplace=True) mchina.drop([&#39;deaths&#39;,&#39;dateRep&#39;],axis=1,inplace=True) mchina.head(5) . countriesAndTerritories Cumulativo . 0 China | 1 | . 1 China | 1 | . 2 China | 1 | . 3 China | 1 | . 4 China | 2 | . mspain = mortos[mortos[&#39;countriesAndTerritories&#39;]==&#39;Spain&#39;] mspain.sort_index(ascending=False,inplace=True) mspain[&#39;Cumulativo&#39;] = mspain[&#39;deaths&#39;].cumsum() mspain = mspain[mspain[&#39;Cumulativo&#39;]&gt;=1] mspain.reset_index(drop=True, inplace=True) mspain.drop([&#39;deaths&#39;,&#39;dateRep&#39;],axis=1,inplace=True) mspain.head(5) . countriesAndTerritories Cumulativo . 0 Spain | 1 | . 1 Spain | 3 | . 2 Spain | 5 | . 3 Spain | 5 | . 4 Spain | 5 | . mindia = mortos[mortos[&#39;countriesAndTerritories&#39;]==&#39;India&#39;] mindia.sort_index(ascending=False,inplace=True) mindia[&#39;Cumulativo&#39;] = mindia[&#39;deaths&#39;].cumsum() mindia = mindia[mindia[&#39;Cumulativo&#39;]&gt;=1] mindia.reset_index(drop=True, inplace=True) mindia.drop([&#39;deaths&#39;,&#39;dateRep&#39;],axis=1,inplace=True) mindia.head(5) . countriesAndTerritories Cumulativo . 0 India | 1 | . 1 India | 2 | . 2 India | 2 | . 3 India | 2 | . 4 India | 3 | . mczech = mortos[mortos[&#39;countriesAndTerritories&#39;]==&#39;Czech_Republic&#39;] mczech.sort_index(ascending=False,inplace=True) mczech[&#39;Cumulativo&#39;] = mczech[&#39;deaths&#39;].cumsum() mczech = mczech[mczech[&#39;Cumulativo&#39;]&gt;=1] mczech.reset_index(drop=True, inplace=True) mczech.drop([&#39;deaths&#39;,&#39;dateRep&#39;],axis=1,inplace=True) mczech.tail(5) . countriesAndTerritories Cumulativo . 1 Czech_Republic | 1 | . 2 Czech_Republic | 3 | . 3 Czech_Republic | 6 | . 4 Czech_Republic | 9 | . 5 Czech_Republic | 9 | . Tabela final de mortes . mfinal_data=pd.concat([mbrazil,mitaly,mjapan,muk,mus,msouth_korea,mfrance,mchina,mspain,margentina,mindia,mgermany,mczech],axis=0) mfinal_data[&#39;Dias&#39;]=mfinal_data.index mfinal_data.columns = [&#39;Países e territórios&#39;,&#39;Mortes&#39;, &#39;Dias desde a primeira morte&#39;] . mzoom = mfinal_data[mfinal_data[&#39;Mortes&#39;]&lt;=100] . mmeio_zoom = mfinal_data[mfinal_data[&#39;Mortes&#39;]&lt;=500] . Gr&#225;ficos de mortes . plt.figure(figsize=(6.5,8)) sns.lineplot(x=&#39;Dias desde a primeira morte&#39;,y=&#39;Mortes&#39;,data=mfinal_data[mfinal_data[&#39;Países e territórios&#39;]==&#39;Brazil&#39;],color=&#39;black&#39;,linewidth=4,label=&#39;Brasil&#39;) sns.lineplot(x=&#39;Dias desde a primeira morte&#39;,y=&#39;Mortes&#39;,data=mfinal_data[mfinal_data[&#39;Países e territórios&#39;]==&#39;Italy&#39;],label=&#39;Itália&#39;) sns.lineplot(x=&#39;Dias desde a primeira morte&#39;,y=&#39;Mortes&#39;,data=mfinal_data[mfinal_data[&#39;Países e territórios&#39;]==&#39;United_States_of_America&#39;],label=&#39;Estados Unidos&#39;) sns.lineplot(x=&#39;Dias desde a primeira morte&#39;,y=&#39;Mortes&#39;,data=mfinal_data[mfinal_data[&#39;Países e territórios&#39;]==&#39;United_Kingdom&#39;],label=&#39;Reino Unido&#39;) sns.lineplot(x=&#39;Dias desde a primeira morte&#39;,y=&#39;Mortes&#39;,data=mfinal_data[mfinal_data[&#39;Países e territórios&#39;]==&#39;South_Korea&#39;],label= &quot;Coréia do Sul&quot;) sns.lineplot(x=&#39;Dias desde a primeira morte&#39;,y=&#39;Mortes&#39;,data=mfinal_data[mfinal_data[&#39;Países e territórios&#39;]==&#39;France&#39;],label=&#39;França&#39;) sns.lineplot(x=&#39;Dias desde a primeira morte&#39;,y=&#39;Mortes&#39;,data=mfinal_data[mfinal_data[&#39;Países e territórios&#39;]==&#39;Japan&#39;],label=&#39;Japão&#39;) sns.lineplot(x=&#39;Dias desde a primeira morte&#39;,y=&#39;Mortes&#39;,data=mfinal_data[mfinal_data[&#39;Países e territórios&#39;]==&#39;China&#39;],label=&#39;China&#39;) sns.lineplot(x=&#39;Dias desde a primeira morte&#39;,y=&#39;Mortes&#39;,data=mfinal_data[mfinal_data[&#39;Países e territórios&#39;]==&#39;Spain&#39;],label=&#39;Espanha&#39;) sns.lineplot(x=&#39;Dias desde a primeira morte&#39;,y=&#39;Mortes&#39;,data=mfinal_data[mfinal_data[&#39;Países e territórios&#39;]==&#39;Argentina&#39;],label=&#39;Argentina&#39;) sns.lineplot(x=&#39;Dias desde a primeira morte&#39;,y=&#39;Mortes&#39;,data=mfinal_data[mfinal_data[&#39;Países e territórios&#39;]==&#39;India&#39;],label=&#39;Índia&#39;) sns.lineplot(x=&#39;Dias desde a primeira morte&#39;,y=&#39;Mortes&#39;,data=mfinal_data[mfinal_data[&#39;Países e territórios&#39;]==&#39;Germany&#39;],label=&#39;Alemanha&#39;) sns.lineplot(x=&#39;Dias desde a primeira morte&#39;,y=&#39;Mortes&#39;,data=mfinal_data[mfinal_data[&#39;Países e territórios&#39;]==&#39;Czech_Republic&#39;],label=&#39;República Tcheca&#39;) plt.grid(color=&#39;black&#39;, linestyle=&#39;--&#39;, linewidth=0.17) plt.xlim(70) plt.yscale(&#39;log&#39;) plt.yticks([100,300,500,1000,5000] ) plt.xticks([ 0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70]) plt.title(&#39;COVID-19 - Mortes {} n Escala Logarítmica&#39;.format(today)) plt.savefig(&quot;plots/09_mortes_corona_grafico.png&quot;) . plt.figure(figsize=(6.5,8)) sns.lineplot(x=&#39;Dias desde a primeira morte&#39;,y=&#39;Mortes&#39;,data=mfinal_data[mfinal_data[&#39;Países e territórios&#39;]==&#39;Brazil&#39;],color=&#39;black&#39;,linewidth=7,label=&#39;Brasil&#39;) sns.lineplot(x=&#39;Dias desde a primeira morte&#39;,y=&#39;Mortes&#39;,data=mfinal_data[mfinal_data[&#39;Países e territórios&#39;]==&#39;Italy&#39;],label=&#39;Itália&#39;) sns.lineplot(x=&#39;Dias desde a primeira morte&#39;,y=&#39;Mortes&#39;,data=mfinal_data[mfinal_data[&#39;Países e territórios&#39;]==&#39;United_States_of_America&#39;],label=&#39;Estados Unidos&#39;) sns.lineplot(x=&#39;Dias desde a primeira morte&#39;,y=&#39;Mortes&#39;,data=mfinal_data[mfinal_data[&#39;Países e territórios&#39;]==&#39;United_Kingdom&#39;],label=&#39;Reino Unido&#39;) sns.lineplot(x=&#39;Dias desde a primeira morte&#39;,y=&#39;Mortes&#39;,data=mfinal_data[mfinal_data[&#39;Países e territórios&#39;]==&#39;South_Korea&#39;],label= &quot;Coréia do Sul&quot;) sns.lineplot(x=&#39;Dias desde a primeira morte&#39;,y=&#39;Mortes&#39;,data=mfinal_data[mfinal_data[&#39;Países e territórios&#39;]==&#39;France&#39;],label=&#39;França&#39;) sns.lineplot(x=&#39;Dias desde a primeira morte&#39;,y=&#39;Mortes&#39;,data=mfinal_data[mfinal_data[&#39;Países e territórios&#39;]==&#39;Japan&#39;],label=&#39;Japão&#39;) sns.lineplot(x=&#39;Dias desde a primeira morte&#39;,y=&#39;Mortes&#39;,data=mfinal_data[mfinal_data[&#39;Países e territórios&#39;]==&#39;China&#39;],label=&#39;China&#39;) sns.lineplot(x=&#39;Dias desde a primeira morte&#39;,y=&#39;Mortes&#39;,data=mfinal_data[mfinal_data[&#39;Países e territórios&#39;]==&#39;Spain&#39;],label=&#39;Espanha&#39;) sns.lineplot(x=&#39;Dias desde a primeira morte&#39;,y=&#39;Mortes&#39;,data=mfinal_data[mfinal_data[&#39;Países e territórios&#39;]==&#39;Argentina&#39;],label=&#39;Argentina&#39;) sns.lineplot(x=&#39;Dias desde a primeira morte&#39;,y=&#39;Mortes&#39;,data=mfinal_data[mfinal_data[&#39;Países e territórios&#39;]==&#39;India&#39;],label=&#39;Índia&#39;) sns.lineplot(x=&#39;Dias desde a primeira morte&#39;,y=&#39;Mortes&#39;,data=mfinal_data[mfinal_data[&#39;Países e territórios&#39;]==&#39;Germany&#39;],label=&#39;Alemanha&#39;) sns.lineplot(x=&#39;Dias desde a primeira morte&#39;,y=&#39;Mortes&#39;,data=mfinal_data[mfinal_data[&#39;Países e territórios&#39;]==&#39;Czech_Republic&#39;],label=&#39;República Tcheca&#39;) plt.grid(color=&#39;black&#39;, linestyle=&#39;--&#39;, linewidth=0.17) plt.yticks([1,100,300,500,1000,2000,3000,4000,5000,6000,7000,8000] ) plt.xticks([ 0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70]) plt.title(&#39;COVID-19 - Mortes - {} n Escala Aritmética&#39;.format(today)) plt.savefig(&quot;plots/10_mortes_corona_grafico_art.png&quot;) . plt.figure(figsize=(6.5,8)) sns.lineplot(x=&#39;Dias desde a primeira morte&#39;,y=&#39;Mortes&#39;,data=mmeio_zoom[mmeio_zoom[&#39;Países e territórios&#39;]==&#39;Brazil&#39;],color=&#39;black&#39;,linewidth=5,label=&#39;Brasil&#39;) sns.lineplot(x=&#39;Dias desde a primeira morte&#39;,y=&#39;Mortes&#39;,data=mmeio_zoom[mmeio_zoom[&#39;Países e territórios&#39;]==&#39;Italy&#39;],label=&#39;Itália&#39;) sns.lineplot(x=&#39;Dias desde a primeira morte&#39;,y=&#39;Mortes&#39;,data=mmeio_zoom[mmeio_zoom[&#39;Países e territórios&#39;]==&#39;United_States_of_America&#39;],label=&#39;Estados Unidos&#39;) sns.lineplot(x=&#39;Dias desde a primeira morte&#39;,y=&#39;Mortes&#39;,data=mmeio_zoom[mmeio_zoom[&#39;Países e territórios&#39;]==&#39;United_Kingdom&#39;],label=&#39;Reino Unido&#39;) sns.lineplot(x=&#39;Dias desde a primeira morte&#39;,y=&#39;Mortes&#39;,data=mmeio_zoom[mmeio_zoom[&#39;Países e territórios&#39;]==&#39;South_Korea&#39;],label= &quot;Coréia do Sul&quot;) sns.lineplot(x=&#39;Dias desde a primeira morte&#39;,y=&#39;Mortes&#39;,data=mmeio_zoom[mmeio_zoom[&#39;Países e territórios&#39;]==&#39;France&#39;],label=&#39;França&#39;) sns.lineplot(x=&#39;Dias desde a primeira morte&#39;,y=&#39;Mortes&#39;,data=mmeio_zoom[mmeio_zoom[&#39;Países e territórios&#39;]==&#39;Japan&#39;],label=&#39;Japão&#39;) sns.lineplot(x=&#39;Dias desde a primeira morte&#39;,y=&#39;Mortes&#39;,data=mmeio_zoom[mmeio_zoom[&#39;Países e territórios&#39;]==&#39;China&#39;],label=&#39;China&#39;) sns.lineplot(x=&#39;Dias desde a primeira morte&#39;,y=&#39;Mortes&#39;,data=mmeio_zoom[mmeio_zoom[&#39;Países e territórios&#39;]==&#39;Spain&#39;],label=&#39;Espanha&#39;) sns.lineplot(x=&#39;Dias desde a primeira morte&#39;,y=&#39;Mortes&#39;,data=mmeio_zoom[mmeio_zoom[&#39;Países e territórios&#39;]==&#39;Argentina&#39;],label=&#39;Argentina&#39;) sns.lineplot(x=&#39;Dias desde a primeira morte&#39;,y=&#39;Mortes&#39;,data=mmeio_zoom[mmeio_zoom[&#39;Países e territórios&#39;]==&#39;India&#39;],label=&#39;Índia&#39;) sns.lineplot(x=&#39;Dias desde a primeira morte&#39;,y=&#39;Mortes&#39;,data=mmeio_zoom[mmeio_zoom[&#39;Países e territórios&#39;]==&#39;Germany&#39;],label=&#39;Alemanha&#39;) sns.lineplot(x=&#39;Dias desde a primeira morte&#39;,y=&#39;Mortes&#39;,data=mmeio_zoom[mmeio_zoom[&#39;Países e territórios&#39;]==&#39;Czech_Republic&#39;],label=&#39;República Tcheca&#39;) plt.grid(color=&#39;black&#39;, linestyle=&#39;--&#39;, linewidth=0.17) plt.yticks([1,100,300,500] ) plt.xticks([ 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28,30,32,34,36]) plt.title(&#39;COVID-19 - Mortes {} n Zoom até 500&#39;.format(today)) plt.savefig(&quot;plots/08_mortes_corona_grafico_meiozoom.png&quot;) . plt.figure(figsize=(6.5,8)) sns.lineplot(x=&#39;Dias desde a primeira morte&#39;,y=&#39;Mortes&#39;,data=mzoom[mzoom[&#39;Países e territórios&#39;]==&#39;Brazil&#39;],color=&#39;black&#39;,linewidth=4,label=&#39;Brasil&#39;) sns.lineplot(x=&#39;Dias desde a primeira morte&#39;,y=&#39;Mortes&#39;,data=mzoom[mzoom[&#39;Países e territórios&#39;]==&#39;Italy&#39;],label=&#39;Itália&#39;) sns.lineplot(x=&#39;Dias desde a primeira morte&#39;,y=&#39;Mortes&#39;,data=mzoom[mzoom[&#39;Países e territórios&#39;]==&#39;United_States_of_America&#39;],label=&#39;Estados Unidos&#39;) sns.lineplot(x=&#39;Dias desde a primeira morte&#39;,y=&#39;Mortes&#39;,data=mzoom[mzoom[&#39;Países e territórios&#39;]==&#39;United_Kingdom&#39;],label=&#39;Reino Unido&#39;) sns.lineplot(x=&#39;Dias desde a primeira morte&#39;,y=&#39;Mortes&#39;,data=mzoom[mzoom[&#39;Países e territórios&#39;]==&#39;South_Korea&#39;],label= &quot;Coréia do Sul&quot;) sns.lineplot(x=&#39;Dias desde a primeira morte&#39;,y=&#39;Mortes&#39;,data=mzoom[mzoom[&#39;Países e territórios&#39;]==&#39;France&#39;],label=&#39;França&#39;) sns.lineplot(x=&#39;Dias desde a primeira morte&#39;,y=&#39;Mortes&#39;,data=mzoom[mzoom[&#39;Países e territórios&#39;]==&#39;Japan&#39;],label=&#39;Japão&#39;) sns.lineplot(x=&#39;Dias desde a primeira morte&#39;,y=&#39;Mortes&#39;,data=mzoom[mzoom[&#39;Países e territórios&#39;]==&#39;China&#39;],label=&#39;China&#39;) sns.lineplot(x=&#39;Dias desde a primeira morte&#39;,y=&#39;Mortes&#39;,data=mzoom[mzoom[&#39;Países e territórios&#39;]==&#39;Spain&#39;],label=&#39;Espanha&#39;) sns.lineplot(x=&#39;Dias desde a primeira morte&#39;,y=&#39;Mortes&#39;,data=mzoom[mzoom[&#39;Países e territórios&#39;]==&#39;Argentina&#39;],label=&#39;Argentina&#39;) sns.lineplot(x=&#39;Dias desde a primeira morte&#39;,y=&#39;Mortes&#39;,data=mzoom[mzoom[&#39;Países e territórios&#39;]==&#39;India&#39;],label=&#39;Índia&#39;) sns.lineplot(x=&#39;Dias desde a primeira morte&#39;,y=&#39;Mortes&#39;,data=mzoom[mzoom[&#39;Países e territórios&#39;]==&#39;Czech_Republic&#39;],label=&#39;República Tcheca&#39;) plt.grid(color=&#39;black&#39;, linestyle=&#39;--&#39;, linewidth=0.17) plt.yticks([25,50,75,100]) plt.xticks([ 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32,34, 36, 38]) plt.title(&#39;COVID-19 - Mortes {} n Zoom até 100&#39;.format(today)) plt.savefig(&quot;plots/05_mortes_corona_grafico_zoom.png&quot;) . Curva percentual . brazil[&#39;razao&#39;]= brazil[&#39;Cumulativo&#39;].pct_change() brazil[&#39;razao&#39;]=(brazil[&#39;razao&#39;]*100).round(2) brazil[&#39;dias&#39;]= brazil.index brazil . countriesAndTerritories Cumulativo Relativo razao dias . 0 Brazil | 52 | 0.002484 | NaN | 0 | . 1 Brazil | 77 | 0.003679 | 48.08 | 1 | . 2 Brazil | 98 | 0.004682 | 27.27 | 2 | . 3 Brazil | 121 | 0.005781 | 23.47 | 3 | . 4 Brazil | 200 | 0.009556 | 65.29 | 4 | . 5 Brazil | 234 | 0.011180 | 17.00 | 5 | . 6 Brazil | 291 | 0.013903 | 24.36 | 6 | . 7 Brazil | 428 | 0.020449 | 47.08 | 7 | . 8 Brazil | 621 | 0.029670 | 45.09 | 8 | . 9 Brazil | 904 | 0.043192 | 45.57 | 9 | . 10 Brazil | 1128 | 0.053894 | 24.78 | 10 | . 11 Brazil | 1546 | 0.073865 | 37.06 | 11 | . 12 Brazil | 1891 | 0.090349 | 22.32 | 12 | . 13 Brazil | 2201 | 0.105160 | 16.39 | 13 | . 14 Brazil | 2433 | 0.116245 | 10.54 | 14 | . 15 Brazil | 2915 | 0.139274 | 19.81 | 15 | . 16 Brazil | 3417 | 0.163258 | 17.22 | 16 | . plt.figure(figsize=(10,5)) plt.yticks([25,50,75,100]) plt.ylim(0,100) sns.lineplot(x=&#39;dias&#39;,y=&#39;razao&#39;,data=brazil,color=&#39;black&#39;,linewidth=4,label=&#39;Brasil&#39;) plt.plot(brazil[&#39;razao&#39;].rolling(2).mean(),label= &#39;MA 2 days&#39;) plt.plot(brazil[&#39;razao&#39;].rolling(5).mean(),label= &#39;MA 5 days&#39;) plt.savefig(&quot;plots/pct_change.png&quot;) . Letalidade . let_brazil =((mbrazil[&#39;Cumulativo&#39;].values[-1]/brazil[&#39;Cumulativo&#39;].values[-1])*100).round(2) let_us = ((mus[&#39;Cumulativo&#39;].values[-1]/us[&#39;Cumulativo&#39;].values[-1])*100).round(2) let_uk = ((muk[&#39;Cumulativo&#39;].values[-1]/uk[&#39;Cumulativo&#39;].values[-1])*100).round(2) let_italy = ((mitaly[&#39;Cumulativo&#39;].values[-1]/italy[&#39;Cumulativo&#39;].values[-1])*100).round(2) let_spain = ((mspain[&#39;Cumulativo&#39;].values[-1]/spain[&#39;Cumulativo&#39;].values[-1])*100).round(2) let_japan = ((mjapan[&#39;Cumulativo&#39;].values[-1]/japan[&#39;Cumulativo&#39;].values[-1])*100).round(2) let_arg = ((margentina[&#39;Cumulativo&#39;].values[-1]/argentina[&#39;Cumulativo&#39;].values[-1])*100).round(2) let_fran = ((mfrance[&#39;Cumulativo&#39;].values[-1]/france[&#39;Cumulativo&#39;].values[-1])*100).round(2) let_ind = ((mindia[&#39;Cumulativo&#39;].values[-1]/india[&#39;Cumulativo&#39;].values[-1])*100).round(2) let_ger = ((mgermany[&#39;Cumulativo&#39;].values[-1]/germany[&#39;Cumulativo&#39;].values[-1])*100).round(2) let_rc = ((mczech[&#39;Cumulativo&#39;].values[-1]/czech_Republic[&#39;Cumulativo&#39;].values[-1])*100).round(2) let= [let_brazil,let_us,let_uk,let_italy,let_spain,let_fran,let_japan,let_arg,let_ind,let_ger,let_rc] paises = [&#39;Brasil&#39;,&#39;EUA&#39;, &#39;Reino Unido&#39;,&#39;Itália&#39;,&#39;Espanha&#39;,&#39;France&#39;,&#39;Japão&#39;,&#39;Argentina&#39;,&#39;Índia&#39;,&#39;Alemanha&#39;,&#39;República Tcheca&#39;] . letality = pd.DataFrame() letality[&#39;Países&#39;] = paises letality[&#39;Letalidade %&#39;] = let letality . Países Letalidade % . 0 Brasil | 2.69 | . 1 EUA | 1.63 | . 2 Reino Unido | 5.22 | . 3 Itália | 10.56 | . 4 Espanha | 7.58 | . 5 France | 6.05 | . 6 Japão | 3.27 | . 7 Argentina | 2.46 | . 8 Índia | 2.18 | . 9 Alemanha | 0.67 | . 10 República Tcheca | 0.39 | . plt.figure(figsize=(7,9)) plt.ylim(0,10) plt.title(&quot;Letalidade - {}&quot;.format(today)) sns.barplot(letality[&#39;Letalidade %&#39;],letality[&#39;Países&#39;]) plt.grid(axis=&quot;x&quot;,color=&#39;black&#39;, linestyle=&#39;--&#39;, linewidth=0.17) plt.savefig(&quot;plots/11_letalidade.png&quot;) . Casos (abordagem relativa) . plt.figure(figsize=(6.5,8)) sns.lineplot(x=&#39;Dias desde o caso número 50&#39;,y=&#39;Relativa&#39;,data=final_data[final_data[&#39;Países e territórios&#39;]==&#39;Brazil&#39;],color=&#39;black&#39;,linewidth=6,label=&#39;Brasil&#39;) sns.lineplot(x=&#39;Dias desde o caso número 50&#39;,y=&#39;Relativa&#39;,data=final_data[final_data[&#39;Países e territórios&#39;]==&#39;Italy&#39;],label=&#39;Itália&#39;) sns.lineplot(x=&#39;Dias desde o caso número 50&#39;,y=&#39;Relativa&#39;,data=final_data[final_data[&#39;Países e territórios&#39;]==&#39;United_States_of_America&#39;],label=&#39;Estados Unidos&#39;) sns.lineplot(x=&#39;Dias desde o caso número 50&#39;,y=&#39;Relativa&#39;,data=final_data[final_data[&#39;Países e territórios&#39;]==&#39;United_Kingdom&#39;],label=&#39;Reino Unido&#39;) sns.lineplot(x=&#39;Dias desde o caso número 50&#39;,y=&#39;Relativa&#39;,data=final_data[final_data[&#39;Países e territórios&#39;]==&#39;South_Korea&#39;],label= &quot;Coréia do Sul&quot;) sns.lineplot(x=&#39;Dias desde o caso número 50&#39;,y=&#39;Relativa&#39;,data=final_data[final_data[&#39;Países e territórios&#39;]==&#39;France&#39;],label=&#39;França&#39;) sns.lineplot(x=&#39;Dias desde o caso número 50&#39;,y=&#39;Relativa&#39;,data=final_data[final_data[&#39;Países e territórios&#39;]==&#39;Japan&#39;],label=&#39;Japão&#39;) sns.lineplot(x=&#39;Dias desde o caso número 50&#39;,y=&#39;Relativa&#39;,data=final_data[final_data[&#39;Países e territórios&#39;]==&#39;Spain&#39;],label=&#39;Espanha&#39;) sns.lineplot(x=&#39;Dias desde o caso número 50&#39;,y=&#39;Relativa&#39;,data=final_data[final_data[&#39;Países e territórios&#39;]==&#39;Argentina&#39;],label=&#39;Argentina&#39;) sns.lineplot(x=&#39;Dias desde o caso número 50&#39;,y=&#39;Relativa&#39;,data=final_data[final_data[&#39;Países e territórios&#39;]==&#39;India&#39;],label=&#39;Índia&#39;) sns.lineplot(x=&#39;Dias desde o caso número 50&#39;,y=&#39;Relativa&#39;,data=final_data[final_data[&#39;Países e territórios&#39;]==&#39;Germany&#39;],label=&#39;Alemanha&#39;) sns.lineplot(x=&#39;Dias desde o caso número 50&#39;,y=&#39;Relativa&#39;,data=final_data[final_data[&#39;Países e territórios&#39;]==&#39;Czech_Republic&#39;],label=&#39;República Tcheca&#39;) plt.grid(color=&#39;black&#39;, linestyle=&#39;--&#39;, linewidth=0.17) plt.ylabel(&#39;Número de casos a cada 10 mil habitantes&#39;) plt.title(&#39;COVID-19 - Contaminação relativa {} nCasos a cada 10 mil habitantes - E. Logarítmica&#39;.format(today)) plt.yscale(&#39;log&#39;) plt.savefig(&quot;plots/05_relativa_exponencial.png&quot;) #plt.ylim(0,np.power(1,-16)) plt.xticks([ 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28,30,32,34,36]) . ([&lt;matplotlib.axis.XTick at 0x7f3e0287bda0&gt;, &lt;matplotlib.axis.XTick at 0x7f3e0287bd68&gt;, &lt;matplotlib.axis.XTick at 0x7f3e02815630&gt;, &lt;matplotlib.axis.XTick at 0x7f3e02815a90&gt;, &lt;matplotlib.axis.XTick at 0x7f3e028215c0&gt;, &lt;matplotlib.axis.XTick at 0x7f3e02821ac8&gt;, &lt;matplotlib.axis.XTick at 0x7f3e028216a0&gt;, &lt;matplotlib.axis.XTick at 0x7f3e02821f28&gt;, &lt;matplotlib.axis.XTick at 0x7f3e02829400&gt;, &lt;matplotlib.axis.XTick at 0x7f3e02829898&gt;, &lt;matplotlib.axis.XTick at 0x7f3e02829d30&gt;, &lt;matplotlib.axis.XTick at 0x7f3e0287ba90&gt;, &lt;matplotlib.axis.XTick at 0x7f3e026c0eb8&gt;, &lt;matplotlib.axis.XTick at 0x7f3e026cd320&gt;, &lt;matplotlib.axis.XTick at 0x7f3e026cdf28&gt;, &lt;matplotlib.axis.XTick at 0x7f3e02656438&gt;, &lt;matplotlib.axis.XTick at 0x7f3e026568d0&gt;, &lt;matplotlib.axis.XTick at 0x7f3e02656d68&gt;, &lt;matplotlib.axis.XTick at 0x7f3e02658278&gt;], &lt;a list of 19 Text major ticklabel objects&gt;) . plt.figure(figsize=(6.5,8)) sns.lineplot(x=&#39;Dias desde o caso número 50&#39;,y=&#39;Relativa&#39;,data=final_data[final_data[&#39;Países e territórios&#39;]==&#39;Brazil&#39;],color=&#39;black&#39;,linewidth=6,label=&#39;Brasil&#39;) sns.lineplot(x=&#39;Dias desde o caso número 50&#39;,y=&#39;Relativa&#39;,data=final_data[final_data[&#39;Países e territórios&#39;]==&#39;Italy&#39;],label=&#39;Itália&#39;) sns.lineplot(x=&#39;Dias desde o caso número 50&#39;,y=&#39;Relativa&#39;,data=final_data[final_data[&#39;Países e territórios&#39;]==&#39;United_States_of_America&#39;],label=&#39;Estados Unidos&#39;) sns.lineplot(x=&#39;Dias desde o caso número 50&#39;,y=&#39;Relativa&#39;,data=final_data[final_data[&#39;Países e territórios&#39;]==&#39;United_Kingdom&#39;],label=&#39;Reino Unido&#39;) sns.lineplot(x=&#39;Dias desde o caso número 50&#39;,y=&#39;Relativa&#39;,data=final_data[final_data[&#39;Países e territórios&#39;]==&#39;South_Korea&#39;],label= &quot;Coréia do Sul&quot;) sns.lineplot(x=&#39;Dias desde o caso número 50&#39;,y=&#39;Relativa&#39;,data=final_data[final_data[&#39;Países e territórios&#39;]==&#39;France&#39;],label=&#39;França&#39;) sns.lineplot(x=&#39;Dias desde o caso número 50&#39;,y=&#39;Relativa&#39;,data=final_data[final_data[&#39;Países e territórios&#39;]==&#39;Japan&#39;],label=&#39;Japão&#39;) sns.lineplot(x=&#39;Dias desde o caso número 50&#39;,y=&#39;Relativa&#39;,data=final_data[final_data[&#39;Países e territórios&#39;]==&#39;Spain&#39;],label=&#39;Espanha&#39;) sns.lineplot(x=&#39;Dias desde o caso número 50&#39;,y=&#39;Relativa&#39;,data=final_data[final_data[&#39;Países e territórios&#39;]==&#39;Argentina&#39;],label=&#39;Argentina&#39;) sns.lineplot(x=&#39;Dias desde o caso número 50&#39;,y=&#39;Relativa&#39;,data=final_data[final_data[&#39;Países e territórios&#39;]==&#39;India&#39;],label=&#39;Índia&#39;) sns.lineplot(x=&#39;Dias desde o caso número 50&#39;,y=&#39;Relativa&#39;,data=final_data[final_data[&#39;Países e territórios&#39;]==&#39;Germany&#39;],label=&#39;Alemanha&#39;) sns.lineplot(x=&#39;Dias desde o caso número 50&#39;,y=&#39;Relativa&#39;,data=final_data[final_data[&#39;Países e territórios&#39;]==&#39;Czech_Republic&#39;],label=&#39;República Tcheca&#39;) plt.grid(color=&#39;black&#39;, linestyle=&#39;--&#39;, linewidth=0.17) plt.ylabel(&#39;Número de casos a cada 10 mil habitantes&#39;) plt.title(&#39;COVID-19 - Contaminação relativa {} nCasos a cada 10 mil habitantes - E. Aritmética&#39; .format(today)) plt.savefig(&quot;plots/06_relativa_aritmetica.png&quot;) plt.xticks([ 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28,30,32,34,36]) . ([&lt;matplotlib.axis.XTick at 0x7f3e02652ef0&gt;, &lt;matplotlib.axis.XTick at 0x7f3e02652eb8&gt;, &lt;matplotlib.axis.XTick at 0x7f3e025df7f0&gt;, &lt;matplotlib.axis.XTick at 0x7f3e025ec128&gt;, &lt;matplotlib.axis.XTick at 0x7f3e025ec780&gt;, &lt;matplotlib.axis.XTick at 0x7f3e025ecc18&gt;, &lt;matplotlib.axis.XTick at 0x7f3e025ec198&gt;, &lt;matplotlib.axis.XTick at 0x7f3e025f2588&gt;, &lt;matplotlib.axis.XTick at 0x7f3e025ec828&gt;, &lt;matplotlib.axis.XTick at 0x7f3e025f24a8&gt;, &lt;matplotlib.axis.XTick at 0x7f3e025f2b00&gt;, &lt;matplotlib.axis.XTick at 0x7f3e02652be0&gt;, &lt;matplotlib.axis.XTick at 0x7f3e0267aa58&gt;, &lt;matplotlib.axis.XTick at 0x7f3e0249e278&gt;, &lt;matplotlib.axis.XTick at 0x7f3e0249e9b0&gt;, &lt;matplotlib.axis.XTick at 0x7f3e02497e48&gt;, &lt;matplotlib.axis.XTick at 0x7f3e02497978&gt;, &lt;matplotlib.axis.XTick at 0x7f3e0250c748&gt;, &lt;matplotlib.axis.XTick at 0x7f3e02504710&gt;], &lt;a list of 19 Text major ticklabel objects&gt;) . import plotly.express as px fig = px.line(final_data, x=&quot;Dias desde o caso número 50&quot;, y=&quot;Relativa&quot;, color=&#39;Países e territórios&#39;,labels=&#39;Países e territórios&#39;,color_discrete_sequence=px.colors.qualitative.G10,title=&quot;Curvas dos estados brasileiros&quot;, animation_frame=&quot;Dias desde o caso número 50&quot;) fig.update_layout( yaxis_type=&quot;log&quot;) fig.show() fig.write_html(&quot;plots/11_letalidade.html&quot;) . . . mfinal_data . Países e territórios Mortes Dias desde a primeira morte . 0 Brazil | 1 | 0 | . 1 Brazil | 4 | 1 | . 2 Brazil | 6 | 2 | . 3 Brazil | 11 | 3 | . 4 Brazil | 18 | 4 | . ... ... | ... | ... | . 1 Czech_Republic | 1 | 1 | . 2 Czech_Republic | 3 | 2 | . 3 Czech_Republic | 6 | 3 | . 4 Czech_Republic | 9 | 4 | . 5 Czech_Republic | 9 | 5 | . 384 rows × 3 columns . plt.plot(x=mfinal_data[&#39;Mortes&#39;][mfinal_data[&#39;Dias desde a primeira morte&#39;]-7],y=&#39;Mortes&#39;,hue=&#39;Países e territórios&#39;,data=mfinal_data) . TypeError Traceback (most recent call last) &lt;ipython-input-373-6fdae7368ee3&gt; in &lt;module&gt;() -&gt; 1 plt.plot(x=mfinal_data[&#39;Mortes&#39;][mfinal_data[&#39;Dias desde a primeira morte&#39;]-7],y=&#39;Mortes&#39;,hue=&#39;Países e territórios&#39;,data=mfinal_data) /usr/local/lib/python3.6/dist-packages/matplotlib/pyplot.py in plot(scalex, scaley, data, *args, **kwargs) 2761 return gca().plot( 2762 *args, scalex=scalex, scaley=scaley, **({&#34;data&#34;: data} if data -&gt; 2763 is not None else {}), **kwargs) 2764 2765 /usr/local/lib/python3.6/dist-packages/matplotlib/axes/_axes.py in plot(self, scalex, scaley, data, *args, **kwargs) 1644 &#34;&#34;&#34; 1645 kwargs = cbook.normalize_kwargs(kwargs, mlines.Line2D) -&gt; 1646 lines = [*self._get_lines(*args, data=data, **kwargs)] 1647 for line in lines: 1648 self.add_line(line) /usr/local/lib/python3.6/dist-packages/matplotlib/axes/_base.py in __call__(self, *args, **kwargs) 157 if pos_only in kwargs: 158 raise TypeError(&#34;{} got an unexpected keyword argument {!r}&#34; --&gt; 159 .format(self.command, pos_only)) 160 161 if not args: TypeError: plot got an unexpected keyword argument &#39;x&#39; . italy x = italy.shift(-7) x.head(4) . countriesAndTerritories Cumulativo Relativo . 0 Italy | 1128.0 | 0.018617 | . 1 Italy | 1689.0 | 0.027876 | . 2 Italy | 1835.0 | 0.030286 | . 3 Italy | 2502.0 | 0.041294 | . italy.head(4) . countriesAndTerritories Cumulativo Relativo . 0 Italy | 79 | 0.001304 | . 1 Italy | 132 | 0.002179 | . 2 Italy | 229 | 0.003780 | . 3 Italy | 322 | 0.005314 | . italy[&#39;Shifted&#39;] = x[&#39;Cumulativo&#39;] . italy.head(10) . countriesAndTerritories Cumulativo Relativo Shifted . 0 Italy | 79 | 0.001304 | 1128.0 | . 1 Italy | 132 | 0.002179 | 1689.0 | . 2 Italy | 229 | 0.003780 | 1835.0 | . 3 Italy | 322 | 0.005314 | 2502.0 | . 4 Italy | 400 | 0.006602 | 3089.0 | . 5 Italy | 650 | 0.010728 | 3858.0 | . 6 Italy | 888 | 0.014656 | 4636.0 | . 7 Italy | 1128 | 0.018617 | 5883.0 | . 8 Italy | 1689 | 0.027876 | 7375.0 | . 9 Italy | 1835 | 0.030286 | 9172.0 | . italy.tail(5) . countriesAndTerritories Cumulativo Relativo Shifted . 30 Italy | 63927 | 1.055075 | NaN | . 31 Italy | 69176 | 1.141707 | NaN | . 32 Italy | 74386 | 1.227694 | NaN | . 33 Italy | 80539 | 1.329246 | NaN | . 34 Italy | 86498 | 1.427595 | NaN | . x = np.arange(1,34,7) x . array([ 1, 8, 15, 22, 29]) . italyweek = pd.DataFrame() . italyweek = [] for i in x: y = italy[italy.index==i] italyweek.append(y) italy_week = pd.concat(italyweek) . italy_week . countriesAndTerritories Cumulativo Relativo Shifted . 1 Italy | 132 | 0.002179 | 1689.0 | . 8 Italy | 1689 | 0.027876 | 7375.0 | . 15 Italy | 7375 | 0.121720 | 23980.0 | . 22 Italy | 23980 | 0.395775 | 59138.0 | . 29 Italy | 59138 | 0.976036 | NaN | . italy1 = italy[italy.index==1] italy2 = italy[italy.index==2] . italy_x = pd.concat((italy1,italy2),axis=0) . italy_x . countriesAndTerritories Cumulativo Relativo Shifted . 1 Italy | 132 | 0.002179 | 1689.0 | . 2 Italy | 229 | 0.003780 | 1835.0 | . lista = final_data[&#39;Países e territórios&#39;].unique() lista . array([&#39;Brazil&#39;, &#39;Italy&#39;, &#39;Japan&#39;, &#39;United_Kingdom&#39;, &#39;United_States_of_America&#39;, &#39;France&#39;, &#39;South_Korea&#39;, &#39;Spain&#39;, &#39;Argentina&#39;, &#39;India&#39;, &#39;Mexico&#39;, &#39;Germany&#39;, &#39;Czech_Republic&#39;], dtype=object) . teste = [] for x in lista: globals()[&#39;tabela%s&#39; % x] = &#39;Hello&#39; . tabelaItaly . &#39;Hello&#39; .",
            "url": "https://covid19graficos.github.io/relatorio/2020/03/28/corona_mundo.html",
            "relUrl": "/2020/03/28/corona_mundo.html",
            "date": " • Mar 28, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # Title &gt; Awesome summary - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://covid19graficos.github.io/relatorio/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://covid19graficos.github.io/relatorio/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://covid19graficos.github.io/relatorio/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

}